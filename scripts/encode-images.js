const fs = require('fs');
const path = require('path');

const imagesDir = path.join(__dirname, '..', 'assets', 'images');
const outputFile = path.join(__dirname, '..', 'src', 'images.ts');

const imageFiles = [
  'bluesky-show-1.webp',
  'bluesky-show2.webp', 
  'bluesky-show3.webp'
];

let output = '// Auto-generated file - do not edit manually\n';
output += '// Generated by scripts/encode-images.js\n\n';
output += 'export const ENCODED_IMAGES: Record<string, string> = {\n';

for (const imageFile of imageFiles) {
  const imagePath = path.join(imagesDir, imageFile);
  if (fs.existsSync(imagePath)) {
    const imageBuffer = fs.readFileSync(imagePath);
    const base64 = imageBuffer.toString('base64');
    const key = imageFile.replace(/[.-]/g, '_').toUpperCase();
    output += `  '${imageFile}': '${base64}',\n`;
    console.log(`‚úÖ Encoded ${imageFile} (${imageBuffer.length} bytes)`);
  } else {
    console.log(`‚ùå File not found: ${imagePath}`);
  }
}

output += '};\n\n';
output += 'export function getImageBuffer(filename: string): Uint8Array | null {\n';
output += '  const base64 = ENCODED_IMAGES[filename];\n';
output += '  if (!base64) return null;\n';
output += '  const buffer = Buffer.from(base64, "base64");\n';
output += '  return new Uint8Array(buffer);\n';
output += '}\n';

fs.writeFileSync(outputFile, output);
console.log(`üìÑ Generated ${outputFile}`);